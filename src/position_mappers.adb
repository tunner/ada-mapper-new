with Types_From; use Types_From;
with Types_To;   use Types_To;

package body Position_Mappers is
   --  Generated by tools/gen_mapper.py â€” DO NOT EDIT.
   function Map (X : Types_From.T_Position_From_GPS) return Types_To.T_Position_To_Station is
     ( Lat => T_Latitude_Count (X.FR_Position.Latitude),
       Lon => T_Longitude_Count (X.FR_Position.Longitude),
       Speed => Map(X.FR_Speed),
       Satellites => Map(X.FR_Satellites),
       Status => Map(X.FR_Status) );
   function Map (X : Types_From.e_Speed) return Types_To.T_Speed is
     ( North => T_Speed_Fraction (X.North),
       East => T_Speed_Fraction (X.East),
       Down => T_Speed_Fraction (X.Down) );
   function Map (X : Types_From.e_Satellite) return Types_To.T_Satellite is
     ( ID => T_Unsigned_8 (X.ID),
       Position => Map(X.Position),
       Speed => Map(X.Speed) );
   function Map (X : Types_From.e_Position) return Types_To.T_Position is
     ( Lat => T_Latitude_Count (X.Latitude),
       Lon => T_Longitude_Count (X.Longitude) );
   function Map (A : Types_From.e_Satellites) return Types_To.T_Satellites is
      R : Types_To.T_Satellites;
   begin
      for I in R'Range loop
         R(I) := Map(A(I));
      end loop;
      return R;
   end Map;
   function Map (E : Types_From.e_Status) return Types_To.T_Status is
     (case E is
        when Unknown => None,
        when Good => Good,
        when Bad => Bad
     );

end Position_Mappers;
