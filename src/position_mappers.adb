with Types_From; use Types_From;
with Types_To;   use Types_To;

package body Position_Mappers is
   --  Generated by tools/gen_mapper.py â€” DO NOT EDIT.
   function Map (X : Types_From.T_Position_From_GPS) return Types_To.T_Position_To_Station is
     (
       Lat => T_Latitude_Count (X.FR_Position.Latitude),
       Lon => T_Longitude_Count (X.FR_Position.Longitude),
       Speed => Map(X.FR_Speed),
       Satellites => Map(X.FR_Satellites),
       Status => Map(X.FR_Status),
       Sat_Position_Refs => Map(X.FR_Sat_Pos_Refs),
       Sat_Routes => Map(X.FR_Sat_Routes)
     );
   function Map (X : Types_From.Telemetry.e_Speed) return Types_To.Telemetry.T_Speed is
     (
       North => T_Speed_Fraction (X.North),
       East => T_Speed_Fraction (X.East),
       Down => T_Speed_Fraction (X.Down)
     );
   function Map (X : Types_From.e_Satellite) return Types_To.T_Satellite is
     (
       ID => T_Unsigned_8 (X.ID),
       Position => Map(X.Position),
       Speed => Map(X.Speed),
       Name => String (X.Name),
       Snapshots => Map(X.Snapshots)
     );
   function Map (X : Types_From.Telemetry.e_Position) return Types_To.Telemetry.T_Position is
     (
       Lat => T_Latitude_Count (X.Latitude),
       Lon => T_Longitude_Count (X.Longitude),
       Heading_Track => T_Fixed_Angle (X.Heading),
       Recent_Speeds => Map(X.Speed_History)
     );
   function Map (A : Types_From.Telemetry.e_Position_Catalog_4) return Types_To.Telemetry.T_Position_Catalog_4 is
      R : Types_To.Telemetry.T_Position_Catalog_4;
   begin
      for I in R'Range loop
         R(I) := Map(A(I));
      end loop;
      return R;
   end Map;
   function Map (A : Types_From.Telemetry.e_Speed_Buffer_2) return Types_To.Telemetry.T_Speed_Buffer_2 is
      R : Types_To.Telemetry.T_Speed_Buffer_2;
   begin
      for I in R'Range loop
         R(I) := Map(A(I));
      end loop;
      return R;
   end Map;
   function Map (A : Types_From.e_Satellite_Refs) return Types_To.T_Satellite_Positions is
      R : Types_To.T_Satellite_Positions;
   begin
      for I in R'Range loop
         R(I) := Map(A(I));
      end loop;
      return R;
   end Map;
   function Map (A : Types_From.e_Satellite_Route_Window) return Types_To.T_Satellite_Position_Routes_Window is
      R : Types_To.T_Satellite_Position_Routes_Window;
   begin
      for I in R'Range loop
         for J in R'Range(2) loop
            R(I, J) := Map(A(I, J));
         end loop;
      end loop;
      return R;
   end Map;
   function Map (A : Types_From.e_Satellites) return Types_To.T_Satellites is
      R : Types_To.T_Satellites;
   begin
      for I in R'Range loop
         R(I) := Map(A(I));
      end loop;
      return R;
   end Map;
   function Map (E : Types_From.Telemetry.e_Status) return Types_To.Telemetry.T_Status is
     (case E is
        when Types_From.Telemetry.Unknown => Types_To.Telemetry.None,
        when Types_From.Telemetry.Good => Types_To.Telemetry.Good,
        when Types_From.Telemetry.Bad => Types_To.Telemetry.Bad
     );

end Position_Mappers;
