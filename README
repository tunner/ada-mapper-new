Ada record-to-record mapper generator

What this does
- Generates Ada `Map` functions between source and destination record types based on a minimal JSON spec.
- Uses Adaâ€™s type system: casts are inlined to the destination field type.
- Supports nested records, arrays (including arrays of records/arrays), and enums.
- Allows dotted source paths to flatten nested fields.

Quick start
- Edit `mappings.json` and the type specs (default: `src/types_from.ads` and `src/types_to.ads`).
- Generate: `python3 tools/gen_mapper.py mappings.json src`
- Optional compile check (requires `gnatmake`): `python3 tools/gen_mapper.py --validate mappings.json src`

Need different spec filenames? Add `--from-spec` / `--to-spec`, e.g.
`python3 tools/gen_mapper.py --from-spec custom_from.ads --to-spec custom_to.ads mappings.json src`

Scaffolding a mapping file
- Bootstrap: `python3 tools/gen_mapper.py mappings.json src --init-json-map Name:From_Type:To_Type`
  (repeat the `NAME:FROM:TO` triplet for each top-level mapping). The tool pre-fills obvious
  matches (case-insensitive exact names) and adds nested records/arrays with placeholders for the
  remaining fields.
- Iteratively refine: after editing the JSON, re-run with `--update-json-map` to auto-fill any new
  matches the heuristics can now resolve.

JSON format (example)
{
  "mappings": [
    {
      "name": "Position_From_GPS_To_Station",
      "from": "T_Position_From_GPS",
      "to": "T_Position_To_Station",
      "fields": {
        "Lat": "Position.Latitude",
        "Lon": "Position.Longitude",
        "Speed": "Speed",
        "Satellites": "Satellites",
        "Status": "Status"
      }
    }
  ]
}

Notes
- Only field names are declared; no types or conversions in JSON.
- Nested records: the generator delegates to `Map(Subrecord)` if a pair exists.
- Arrays: the generator emits `Map(A : From_Array) return To_Array` and maps elements, delegating if needed.
- Enums: the generator emits a dedicated `Map` for enum pairs; it maps by literal name when possible, else by position (`Dst'Val(Src'Pos(...))`).

Providers
- Default: regex-based parsing over `src/types_from.ads` and `src/types_to.ads`.
- Optional: Libadalang (when installed): `--provider lal`.
