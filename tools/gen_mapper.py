#!/usr/bin/env python3
"""
Minimal mapper generator (MVP sketch).

Reads mappings.json and emits a simple Ada package with
overloaded Map functions that map fields using Convert(...).

Assumptions (kept simple on purpose):
- Source types live in package `Types_From` (src/types_from.ads).
- Destination types live in package `Types_To` (src/types_to.ads).
- JSON lists mappings with `from`, `to`, `fields`.
- We generate files: src/position_mappers.ads and src/position_mappers.adb

Usage:
  python3 tools/gen_mapper.py [mappings.json] [outdir]
Defaults:
  mappings.json
  outdir = src
"""
from __future__ import annotations

import json
import sys
from pathlib import Path
from parser import parse_record_components


SPEC_TEMPLATE_HEADER = """with Types_From;
with Types_To;

package Position_Mappers is
   --  Generated by tools/gen_mapper.py — DO NOT EDIT.
"""

SPEC_TEMPLATE_FOOTER = """
end Position_Mappers;
"""


BODY_TEMPLATE_HEADER = """with Types_From; use Types_From;
with Types_To;   use Types_To;

package body Position_Mappers is
   --  Generated by tools/gen_mapper.py — DO NOT EDIT.
"""

BODY_TEMPLATE_FOOTER = """
end Position_Mappers;
"""


def gen_function_spec(src_type: str, dst_type: str) -> str:
    return f"   function Map (X : Types_From.{src_type}) return Types_To.{dst_type};\n"


def gen_function_body(src_type: str, dst_type: str, fields: dict[str, str],
                      dst_field_types: dict[str, str]) -> str:
    # fields: { dest_field: src_field }
    associations = []
    for dest, src in fields.items():
        dst_t = dst_field_types.get(dest)
        expr = f"X.{src}" if not dst_t else f"{dst_t} (X.{src})"
        associations.append(f"{dest} => {expr}")
    joined = ",\n       ".join(associations)
    return (
        f"   function Map (X : Types_From.{src_type}) return Types_To.{dst_type} is\n"
        f"     ( {joined} );\n"
    )


def main():
    mappings_path = Path(sys.argv[1]) if len(sys.argv) > 1 else Path("mappings.json")
    outdir = Path(sys.argv[2]) if len(sys.argv) > 2 else Path("src")

    spec_path = outdir / "position_mappers.ads"
    body_path = outdir / "position_mappers.adb"

    data = json.loads(mappings_path.read_text())
    mappings = data.get("mappings", [])
    if not mappings:
        print("No mappings found in", mappings_path)
        sys.exit(1)

    # Build spec and body content
    spec_parts = [SPEC_TEMPLATE_HEADER]
    body_parts = [BODY_TEMPLATE_HEADER]

    # Parse destination record field types from Types_To
    types_to_ads = Path("src/types_to.ads")

    for m in mappings:
        src_type = m["from"]
        dst_type = m["to"]
        fields = m["fields"]

        dst_field_types = parse_record_components(types_to_ads, dst_type)

        spec_parts.append(gen_function_spec(src_type, dst_type))
        body_parts.append(gen_function_body(src_type, dst_type, fields, dst_field_types))

    spec_parts.append(SPEC_TEMPLATE_FOOTER)
    body_parts.append(BODY_TEMPLATE_FOOTER)

    outdir.mkdir(parents=True, exist_ok=True)
    spec_path.write_text("".join(spec_parts))
    body_path.write_text("".join(body_parts))

    print(f"Wrote {spec_path}")
    print(f"Wrote {body_path}")


if __name__ == "__main__":
    main()
